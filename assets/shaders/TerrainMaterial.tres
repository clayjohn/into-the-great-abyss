[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]

code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx, skip_vertex_transform;
uniform sampler2D heightmap;
uniform sampler2D mapColor;
uniform vec2 world_pos;
uniform vec2 scene_size;



void vertex() {
	vec3 cam = CAMERA_MATRIX[3].xyz + vec3(100.0);
	vec3 pos = (WORLD_MATRIX[3].xyz+vec3(100.0))/200.0;
	float cam_height = textureLod(heightmap, world_pos + scene_size*(cam.xz / 200.0), 1.0).x;
	float height = texture(heightmap, world_pos + scene_size*((VERTEX.xz) / 200.0+pos.xz)).x;
	COLOR = textureLod(mapColor, world_pos + scene_size*((VERTEX.xz) / 200.0+pos.xz), 1.0);
	//saturate the color to brighten the shadows
	COLOR = vec4(0.1)+0.9*(vec4(-dot(COLOR.xyz, vec3(0.299, 0.587, 0.114))*0.5)+COLOR*(1.5));
	VERTEX.y = -5.0 + height*20.0;
	VERTEX.y -= -5.0 + cam_height*20.0;
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
}




void fragment() {
	ALBEDO = COLOR.xyz;
	METALLIC = 0.0;
	ROUGHNESS = 0.0;
	SPECULAR = 0.5;
}
"
_sections_unfolded = [ "Resource" ]

[resource]

render_priority = 0
shader = SubResource( 1 )
shader_param/world_pos = null
shader_param/scene_size = null
_sections_unfolded = [ "shader_param" ]

